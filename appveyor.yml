image: Visual Studio 2019

before_build:
- nuget restore
- choco install opencover.portable
- choco install codecov
- choco install dotnet-sdk
- choco install curl
#- choco install dotnet

build:
  project: WinPath.sln
  verbosity: minimal

test_script:
#- cp "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\System.Console.dll" "C:\projects\WinPath\bin\WinPath.Tests\Debug\net5.0"
#- cd "C:\projects\WinPath"
#- dotnet publish -c Debug --runtime win10-x64 --self-contained true
#- cp "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\System.Runtime.dll" "%xunit20%\System.Runtime.dll"
#- OpenCover.Console.exe -register:user -target:".\bin\WinPath.Tests\Debug\net5.0\WinPath.Tests.dll" -output:".\WinPath_coverage.xml" -oldstyle
# OpenCover.Console.exe -register:user -target:"%xunit20%\xunit.console.x86.exe" -targetargs:".\MyUnitTests\bin\Debug\MyUnitTests.dll -noshadow" -filter:"+[UnitTestTargetProject*]* -[MyUnitTests*]*" -output:".\MyProject_coverage.xml"
- dotnet tool install --global coverlet.console
- cd C:\projects\WinPath\WinPath.Tests
- dotnet test --collect:"XPlat Code Coverage" --settings coverage.settings
#- pwsh: >-
#    $directory = [System.IO.Directory]::GetDirectories($([System.IO.Directory]::GetCurrentDirectory()));
#    echo $directory[0];
#    [System.IO.File]::WriteAllText($([System.IO.Directory]::GetCurrentDirectory()), $directory[0]);
#    Write-Host $([System.IO.File]::ReadAllText($([System.IO.Directory]::GetCurrentDirectory() + $directory[0])));
- dir
- pwd
- cd "TestResults/"
- for dir in */*; do cd $dir; done
- codecov -f "WinPath_coverage.xml"
- curl -s https://codecov.io/bash > codecov
- chmod +x codecov
- codecov -f "WinPath_coverage.xml" -t ${{ secrets.CODECOV_TOKEN }}
